"""
# Automatically generated code for binary analysis using 'dangr_c'.
#
# the Rule class extends the DangrAnalysis, which defines a method
# analize(jasm_pattern) which uses asm pattern-matching
# to detect specific structural findings in the binary,
# and then they are analyzed through symbolic execution and 
# constraint solving.
"""

import sys
from typing import Final, override
from dangr_rt import *

JASM_PATTERN: Final[dict] = {{ jasm_rule | safe }}
META: Final[dict] = {{ meta | safe }}


class Rule(DangrAnalysis):
    @override
    def _analyze_asm_match(self, jasm_match: JasmMatch) -> str | None:
        msg = "{{ msg }}"

        {%- for addr_capture in address_captures %}
        {{ addr_capture }} = jasm_match.addrmatch_from_name("{{ addr_capture }}").value
        {%- endfor %}

        {%- for var_capture in var_captures %}
        {{ var_capture }} = self._create_var_from_capture(jasm_match.varmatch_from_name("{{ var_capture }}"))
        {%- endfor %}

        {%- for assign in where_assigns %}
        {{ assign }}
        {%- endfor %}

        {%- for dep in deps %}
        if not {{ dep }}:
            return
        {%- endfor %}

        {%- for c in constraints %}
        self._add_constraint({{ c }})
        {%- endfor %}

        {%- if config.solve_arguments %}
        args_list = self._concretize_fn_args()

        for args in args_list:
            found_states = self._simulate({{ _target }}, args)
            {%- if satisfiable %}
            if self._satisfiable(found_states):
                return msg
            {%- else %}
            if not found_states:
                return msg if self._unconstrained_sat({{ _target }}, args) else None

            if not self._satisfiable(found_states):
                return msg
            {%- endif %}
        {%- else %}
        found_states = self._simulate({{ _target }})

        {%- if satisfiable %}
        if self._satisfiable(found_states):
            return msg
        {%- else %}
        if not found_states:
            return msg if self._unconstrained_sat({{ _target }}) else None

        if not self._satisfiable(found_states):
            return msg
        {%- endif %}
        {%- endif %}


if __name__ == "__main__":
    parser = DangrArgparse("Run binary analysis and detect a beheavorial pattern")
    parser.add_argument("-b",
                        "--binary-path",
                        type=str,
                        required=True,
                        help="Path to binary to analyze.")

    args = parser.dangr_parse_args()
    rule = Rule(args.binary_path, args.config)
    report = rule.analyze(JASM_PATTERN)

    if report:
        print(report)
        sys.exit(1)

    sys.exit(0)
