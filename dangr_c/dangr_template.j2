"""
# Automatically generated code for binary analysis using 'dangr'.
#
# This script defines a function, `detect`
# The function uses pattern-matching rules (JASM)
# to detect specific structural findings in the binary, which are then analyzed
# through symbolic execution and constraint solving.
"""

from typing import Final
from collections import namedtuple
import sys
import argparse
from dangr_rt.dangr_analysis import DangrAnalysis
from dangr_rt.jasm_findings import structural_filter
from dangr_rt.expression import *
from dangr_rt.dangr_types import Argument
from dangr_rt.dangr_argparse import DangrArgparse

JASM_PATTERN: Final[dict] = {{ jasm_rule | safe }}
META: Final[dict] = {{ meta | safe }}

DetectionResult = namedtuple("DetectionResult", ["detected", "message"])

def detect(binary_path: str, config: dict) -> bool:
    s_findings = structural_filter(binary_path, JASM_PATTERN)
    dangr = DangrAnalysis(binary_path, config)
    vf = dangr.get_variable_factory()

    for s_finding in s_findings:
        dangr.set_finding(s_finding)

        {%- for addr_capture in address_captures %}
        {{ addr_capture }} = s_finding.address_captures["{{ addr_capture }}"]
        {%- endfor %}
        {%- for assign in assigns %}
        {{ assign }}
        {%- endfor %}

        dangr.add_variables([{{ variables | join(', ') }}])

        {%- for dep in deps %}
        if not {{ dep }}:
            break
        {%- endfor %}

        {%- for c in constraints %}
        dangr.add_constraint({{ c }})
        {%- endfor %}

        {%- if config.solve_arguments %}
        concrete_values = dangr.concretize_fn_args()
        found_states = dangr.simulate({{ simulation_target }}, concrete_values)
        {%- else %}
        found_states = dangr.simulate({{ simulation_target }})
        {%- endif %}
        if not found_states:
            break

        {%- if satifiable %}
        if dangr.satisfiable(found_states):
        {%- else %}
        if not dangr.satisfiable(found_states):
        {%- endif %}
            return DetectionResult(True, "{{ msg }}")

    return DetectionResult(False, None)

if __name__ == "__main__":

    parser = DangrArgparse("Run binary analysis and detect a beheavorial pattern")
    parser.add_argument("binary_path", type=str, help="Path to binary to analyze.")
    args = parser.parse_args()
    result = detect(args.binary_path, args.config)

    if result.detected:
        print(result.message)
        sys.exit(1)

    sys.exit(0)
